
extern crate mylib;

use mylib::misc::config::*;
use mylib::contracts::solidity::*;

use std::rc::Rc;

fn main() {
    let config: Box<Rc<Config>> = Config::new(TEST2, true);
    println!("config : {:?}", config.clone());

    let account = "jHb9CJAWyB4jr91VRWn96DkukG4bwdtyTh".to_string();
    let secret  = "snoPBjXtMeMyMHUVTgbuqAfg1SUTb".to_string();
    let payload = "363038303630343035323334383031353631303031303537363030303830666435623530363061343830363130303166363030303339363030306633666536303830363034303532333438303135363030663537363030303830666435623530363030343336313036303434353737633031303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303036303030333530343633383465396563336638313134363034393537356236303030383066643562363036333630303438303336303336303230383131303135363035643537363030303830666435623530333536303735353635623630343038303531393138323532353139303831393030333630323030313930663335623930353666656131363536323761376137323330353832303835383930623264636561646263653663366539393339613839303236633263633962383162383939343435643531303963626138303837313636313334613230303239".to_string();
    let init_json = SolidityInitTxJson::new("jHb9CJAWyB4jr91VRWn96DkukG4bwdtyTh".to_string(), payload);

    let message = SolidityInitMessage::new(secret, init_json);

    let mut solidity = Solidity::with_config(config.clone());
    solidity.set_init_message(message);
    solidity.deploy();
}